pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
-- main


-- functions
function _init()
  _initlevel()
  _update=_updatelevel
  _draw=_drawlevel
end

-- end main
-->8
-- preset maps
map1_env={{1,1,1,1,1},
          {1,0,0,2,0},
          {1,1,1,1,1}}
map1_obj={{0,0,0,0,0},
          {0,0,1,0,0},
          {0,0,0,0,0}}
map1_siz={x=5,y=3}
map1_cnt=1
map1_usr={x=2,y=2}

-- global map variable
map1={env=map1_env,
   obj=map1_obj,
   siz=map1_siz,
   cnt=map1_cnt,
   usr=map1_usr}

-- end preset maps
-->8
-- inlevel

-- current states
c_env={}
c_obj={}
c_mapsiz={}
c_usrpos={}
c_usrface=0 -- face orientation

function _initlevel()
  -- map select / todo: check if valid
  c_env=map1.env
  c_obj=map1.obj
  c_mapsiz=map1.siz
  curr_cnt=map1.cnt -- count filled targets
  c_usrpos=map1.usr
  -- other var init
  c_usrface=3
end

function _updatelevel()
  if (btnp(0) or btnp(1)
      or btnp(2) or btnp(3)) then
    _updatebtnpdpad()
  end
end

function _drawlevel()
  _drawall()
end


-- custom functions
function iswall(x,y)
  return (c_env[y][x] == 1)
end

function isoutsidemap(x,y)
  return ((x < 1) or (x > c_mapsiz.x)
          or (y < 1) or (y > c_mapsiz.y))
end

-- update only if any dpad button is pressed
function _updatebtnpdpad()
  local nx=c_usrpos.x
  local ny=c_usrpos.y
  local nx2=nx
  local ny2=ny
  local cant_move=0
  local is_push=0
  if btnp(0) then -- left
    c_usrface=0
    nx-=1
    nx2-=2
  elseif btnp(1) then -- right
    c_usrface=1
    nx+=1
    nx2+=2
  elseif btnp(2) then -- up
    c_usrface=2
    ny-=1
    ny2-=2
  elseif btnp(3) then -- down
    c_usrface=3
    ny+=1
    ny2+=2
  end
  -- detect outside map
  if (isoutsidemap(nx,ny)) cant_move=1
  -- detect wall collision
  if (cant_move == 0
      and (iswall(nx,ny))) then
    cant_move=1
  end
  -- next position is obj
  if (cant_move == 0
      and c_obj[ny][nx] > 0) then
    -- detect out of map
    if (isoutsidemap(nx2,ny2)) cant_move=1
    -- detect wall collision
    if (cant_move == 0
      and iswall(nx2,ny2)) then
      cant_move=1
    end
    -- detect if reach target
    if (cant_move == 0) then
      is_push=1
      -- compute remain targets
      if (c_env[ny][nx] != 2
          and c_env[ny2][nx2] == 2) then
        curr_cnt-=1
      end
      if (c_env[ny][nx] == 2
          and c_env[ny2][nx2] != 2) then
        curr_cnt+=1
      end
    end
  end
  -- move usr and obj
  if (cant_move == 0) then
    c_usrpos.x=nx
    c_usrpos.y=ny
    if (is_push == 1) then
      c_obj[ny2][nx2]=c_obj[ny][nx]
      c_obj[ny][nx]=0
    end
  end
end

-- clean and redraw all elements
function _drawall()
  cls()
  for y=1,c_mapsiz.y do
    for x=1,c_mapsiz.x do
      -- draw env
      spr(c_env[y][x]+1,x*8,y*8)
      -- draw obj
      if (c_obj[y][x] != 0) then
        spr(c_obj[y][x]+16,x*8,y*8)
      end
    end
  end
  -- draw win
  if (curr_cnt == 0) then
    print("you win!",0,0)
  end
  _drawuser()
end

function _drawuser()
  spr(33+c_usrface,c_usrpos.x*8,c_usrpos.y*8)
end

-- end inlevel
-->8
-- menu

function _updatemenu()
end

function _drawmenu()
end

-- end menu
__gfx__
00000000000000005555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000005555555505555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000005555555505000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000005555555505000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000005555555505000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000005555555505000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000005555555505555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000005555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000065006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060560600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060650600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066005600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800888888008888880088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800888888008188180088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000081818800881818008188180088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000081818800881818008888880081881800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800888888008888880081881800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800888888008888880088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
